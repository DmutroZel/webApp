const telegramApp = window.Telegram.WebApp;
const adminId = new URLSearchParams(window.location.search).get("adminId");
const API_BASE_URL = "";
let salesChart = null;

const state = {
  menuItems: [],
};

// –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞ –¥–∞—à–±–æ—Ä–¥—ñ
function updateDashboardStats() {
  axios
    .get(`${API_BASE_URL}/api/menu`)
    .then(({ data }) => {
      $("#totalDishes").text(data.length || 0);
      state.menuItems = data;
    })
    .catch((err) => console.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–µ–Ω—é:", err));
}

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏
function loadAnalytics() {
  axios
    .get(`${API_BASE_URL}/api/analytics/summary`, { params: { adminId } })
    .then(({ data: { salesByCategory, topSellingItems } }) => {
      // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫–∞
      const ctx = document.getElementById("salesByCategoryChart").getContext("2d");
      if (salesChart) salesChart.destroy();
      salesChart = {
        type: "doughnut",
        data: {
          labels: salesByCategory.map((item) => item._id),
          datasets: [{
            label: "–ü—Ä–æ–¥–∞–∂—ñ",
            data: salesByCategory.map((item) => item.totalSales),
            backgroundColor: ["#ff6b35", "#2c3e50", "#f39c12", "#27ae60", "#8e44ad"],
            borderColor: "#ffffff",
            borderWidth: 2,
          }],
        },
        options: {
          responsive: true,
          plugins: {
            legend: { position: "top" },
            title: { display: false },
          },
        },
      };

      // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É —Ç–æ–ø-—Ç–æ–≤–∞—Ä—ñ–≤
      const $topItemsList = $("#topSellingItemsList").empty();
      topSellingItems.length
        ? topSellingItems.forEach(({ _id, totalQuantity }) =>
            $topItemsList.append(`<li><span>${_id}</span> <span>–ü—Ä–æ–¥–∞–Ω–æ: ${totalQuantity}</span></li>`)
          )
        : $topItemsList.append('<li class="no-items">–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø—Ä–æ –ø—Ä–æ–¥–∞–∂—ñ.</li>');
    })
    .catch((error) => console.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏:", error));
}

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É —Å—Ç—Ä–∞–≤
function loadMenuItems() {
  const $menuList = $("#adminMenuList").html(
    '<div class="loading"><div class="spinner"></div></div>'
  );

  axios
    .get(`${API_BASE_URL}/api/menu`)
    .then(({ data }) => {
      state.menuItems = data;
      $menuList.empty();
      if (!data.length) {
        $menuList.html('<p class="no-items">–ù–µ–º–∞—î —Å—Ç—Ä–∞–≤ —É –º–µ–Ω—é</p>');
        return;
      }
      data.forEach(({ id, image, name, price, category }) => {
        $menuList.append(`
          <div class="admin-menu-item" data-id="${id}">
            <img src="${image}" alt="${name}" onerror="this.src='placeholder.jpg'">
            <div class="admin-menu-info">
              <h4>${name}</h4>
              <p>${price} –≥—Ä–Ω - ${category}</p>
            </div>
            <div class="admin-menu-actions">
              <button class="edit-btn">‚úèÔ∏è</button>
              <button class="delete-btn">üóëÔ∏è</button>
            </div>
          </div>
        `);
      });
    })
    .catch((error) => {
      console.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç—Ä–∞–≤:", error);
      $menuList.html('<p class="error">–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–µ–Ω—é</p>');
    });
}

// –°–∫–∏–¥–∞–Ω–Ω—è —Ñ–æ—Ä–º–∏
function resetForm() {
  $("#menuItemForm")[0].reset();
  $("#itemId").val("");
  $("#formIcon").text("‚ûï");
  $("#formTitle").text("–î–æ–¥–∞—Ç–∏ –Ω–æ–≤—É —Å—Ç—Ä–∞–≤—É");
  $("#formSubmitBtn").html("<span>‚ûï</span> –î–æ–¥–∞—Ç–∏ —Å—Ç—Ä–∞–≤—É");
  $("#cancelEditBtn").hide();
  $("#fileLabel").text("üì∑ –û–±–µ—Ä—ñ—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è");
}

// –ü–æ–∫–∞–∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∞–±–æ —É—Å–ø—ñ—Ö
function showToast(message) {
  const $toast = $('<div class="toast"></div>').text(message);
  $("body").append($toast);
  setTimeout(() => {
    $toast.addClass("show");
    setTimeout(() => $toast.removeClass("show").delay(300).remove(), 3000);
  }, 100);
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–æ–¥—ñ–π
$(document).ready(() => {
  telegramApp.expand();
  updateDashboardStats();
  loadAnalytics();
  loadMenuItems();

  // –ó–º—ñ–Ω–∞ –Ω–∞–∑–≤–∏ —Ñ–∞–π–ª—É –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
  $("#itemImage").on("change", (e) => {
    const file = e.target.files[0];
    $("#fileLabel").text(file ? file.name : "üì∑ –û–±–µ—Ä—ñ—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è");
  });

  // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º–∏
  $("#menuItemForm").on("submit", (e) => {
    e.preventDefault();
    const itemId = $("#itemId").val();
    const formData = new FormData();
    formData.append("adminId", adminId);
    formData.append("name", $("#itemName").val());
    formData.append("description", $("#itemDescription").val());
    formData.append("price", $("#itemPrice").val());
    formData.append("category", $("#itemCategory").val());
    const imageFile = $("#itemImage")[0].files[0];
    if (imageFile) formData.append("image", imageFile);

    const url = itemId ? `${API_BASE_URL}/api/menu/${itemId}` : `${API_BASE_URL}/api/menu`;
    const method = itemId ? "put" : "post";

    $("#formSubmitBtn")
      .prop("disabled", true)
      .html('<span>üîÑ</span> –û–±—Ä–æ–±–∫–∞...');

    axios({
      method,
      url,
      data: formData,
      headers: { "Content-Type": "multipart/form-data" },
    })
      .then(() => {
        loadMenuItems();
        updateDashboardStats();
        loadAnalytics();
        resetForm();
        showToast(`–°—Ç—Ä–∞–≤—É —É—Å–ø—ñ—à–Ω–æ ${itemId ? "–æ–Ω–æ–≤–ª–µ–Ω–æ" : "–¥–æ–¥–∞–Ω–æ"}!`);
      })
      .catch((error) => {
        showToast(`–ü–æ–º–∏–ª–∫–∞: ${error.response?.data?.error || "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ —Å—Ç—Ä–∞–≤—É"}`);
      })
      .finally(() => {
        $("#formSubmitBtn")
          .prop("disabled", false)
          .html(`<span>${itemId ? "üíæ" : "‚ûï"}</span> ${itemId ? "–ó–±–µ—Ä–µ–≥—Ç–∏ –∑–º—ñ–Ω–∏" : "–î–æ–¥–∞—Ç–∏ —Å—Ç—Ä–∞–≤—É"}`);
      });
  });

  // –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Å—Ç—Ä–∞–≤–∏
  $("#adminMenuList").on("click", ".edit-btn", function () {
    const itemId = $(this).closest(".admin-menu-item").data("id");
    const item = state.menuItems.find((i) => i.id === itemId);
    if (item) {
      $("#itemId").val(item.id);
      $("#itemName").val(item.name);
      $("#itemDescription").val(item.description);
      $("#itemPrice").val(item.price);
      $("#itemCategory").val(item.category);
      $("#fileLabel").text("üì∑ –ó–º—ñ–Ω–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è");
      $("#formIcon").text("‚úèÔ∏è");
      $("#formTitle").text("–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Å—Ç—Ä–∞–≤—É");
      $("#formSubmitBtn").html("<span>üíæ</span> –ó–±–µ—Ä–µ–≥—Ç–∏ –∑–º—ñ–Ω–∏");
      $("#cancelEditBtn").show();
      window.scrollTo(0, 0);
    } else {
      showToast("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —Å—Ç—Ä–∞–≤–∏");
    }
  });

  // –°–∫–∞—Å—É–≤–∞–Ω–Ω—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
  $("#cancelEditBtn").on("click", resetForm);

  // –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç—Ä–∞–≤–∏
  $("#adminMenuList").on("click", ".delete-btn", function () {
    if (!confirm("–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü—é —Å—Ç—Ä–∞–≤—É?")) return;

    const itemId = $(this).closest(".admin-menu-item").data("id");
    axios
      .delete(`${API_BASE_URL}/api/menu/${itemId}`, { data: { adminId } })
      .then(() => {
        loadMenuItems();
        updateDashboardStats();
        loadAnalytics();
        showToast("–°—Ç—Ä–∞–≤—É —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ!");
      })
      .catch((error) => {
        showToast(`–ü–æ–º–∏–ª–∫–∞: ${error.response?.data?.error || "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ —Å—Ç—Ä–∞–≤—É"}`);
      });
  });
});

