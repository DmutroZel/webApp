// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Telegram WebApp
    const telegramApp = window.Telegram.WebApp;
    telegramApp.expand();

    // –°—Ç–∞–Ω –¥–æ–¥–∞—Ç–∫—É
    const state = {
      menuItems: [], // –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–≤ —É –º–µ–Ω—é
      cartItems: [], // –ï–ª–µ–º–µ–Ω—Ç–∏ —É –∫–æ—à–∏–∫—É
      API_BASE_URL: "", // –ë–∞–∑–æ–≤–∏–π URL –¥–ª—è API
      currentUser: {
        id: telegramApp.initDataUnsafe.user?.id.toString() || 'unknown', // ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        name: telegramApp.initDataUnsafe.user?.username ||
              `${telegramApp.initDataUnsafe.user?.first_name || ''} ${telegramApp.initDataUnsafe.user?.last_name || ''}`.trim() ||
              '–ê–Ω–æ–Ω—ñ–º', // –Ü–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
      }
    };

    // --- –§–£–ù–ö–¶–Ü–á –î–õ–Ø –ú–ï–ù–Æ ---

    // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–µ–Ω—é –∑ —Å–µ—Ä–≤–µ—Ä–∞
    function loadMenu() {
      axios.get(`${state.API_BASE_URL}/api/menu`)
        .then(({ data }) => {
          state.menuItems = data;
          displayMenu("all");
        })
        .catch(error => {
          console.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–µ–Ω—é:", error);
          $("#menuContainer").html('<p style="color: red;">–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –º–µ–Ω—é. –°–ø—Ä–æ–±—É–π—Ç–µ –æ–Ω–æ–≤–∏—Ç–∏.</p>');
        });
    }

    // –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç—Ä–∞–≤ —É –º–µ–Ω—é
    function displayMenu(category) {
      const $menuContainer = $("#menuContainer").empty();
      const $menuGrid = $("<div>").addClass("menu-grid");
      const itemsToShow = category === "all" ? state.menuItems : state.menuItems.filter(item => item.category === category);

      if (!itemsToShow.length) {
        $menuGrid.html('<p class="no-items">–£ —Ü—ñ–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –ø–æ–∫–∏ —â–æ –Ω–µ–º–∞—î —Å—Ç—Ä–∞–≤.</p>');
      } else {
        itemsToShow.forEach(item => {
          const $card = $("<div>")
            .addClass("dish-card")
            .data("item-id", item.id)
            .html(`
              <img src="${item.image}" alt="${item.name}" class="dish-image">
              <div class="dish-info">
                <h3 class="dish-name">${item.name}</h3>
                ${getStarRatingHTML(item.averageRating)}
                <p class="dish-description">${item.description}</p>
                <div class="dish-price-add">
                  <span class="dish-price">${item.price} –≥—Ä–Ω</span>
                  <button class="add-to-cart" data-id="${item.id}">+</button>
                </div>
              </div>
            `);
          $menuGrid.append($card);
        });
      }
      $menuContainer.append($menuGrid);
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑—ñ—Ä–æ–∫ –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥—É
    function getStarRatingHTML(rating) {
      if (!rating || rating === 0) {
        return '<div class="star-rating no-rating">–©–µ –Ω–µ–º–∞—î –æ—Ü—ñ–Ω–æ–∫</div>';
      }
      let starsHTML = "";
      for (let i = 1; i <= 5; i++) {
        starsHTML += i <= rating ? "‚≠ê" : i - 0.5 <= rating ? "üåü" : "‚òÜ";
      }
      return `<div class="star-rating">${starsHTML} (${rating.toFixed(1)})</div>`;
    }

    // --- –§–£–ù–ö–¶–Ü–á –î–õ–Ø –ö–û–®–ò–ö–ê ---

    // –î–æ–¥–∞–≤–∞–Ω–Ω—è —Å—Ç—Ä–∞–≤–∏ –¥–æ –∫–æ—à–∏–∫–∞
    function addToCart(itemId) {
      const item = state.menuItems.find(i => i.id === itemId);
      if (!item) return;
        
      const existingItem = state.cartItems.find(i => i.id === itemId);
      if (existingItem) {
        existingItem.quantity++;
      } else {
        state.cartItems.push({ ...item, quantity: 1 });
      }
      updateCartItems();
      updateCartCount();
      
      animateAddToCartButton(itemId);
    }

    // –ê–Ω—ñ–º–∞—Ü—ñ—è –∫–Ω–æ–ø–∫–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ –∫–æ—à–∏–∫–∞
    function animateAddToCartButton(itemId) {
      const $button = $(`.add-to-cart[data-id="${itemId}"]`);
      $button.css("transform", "scale(1.2)");
      setTimeout(() => $button.css("transform", "scale(1)"), 200);
    }

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Å—Ç—Ä–∞–≤ —É –∫–æ—à–∏–∫—É
    function updateCartCount() {
      const totalCount = state.cartItems.reduce((sum, item) => sum + item.quantity, 0);
      $("#cartCount").text(totalCount);
    }

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–æ—à–∏–∫–∞
    function updateCartItems() {
      const $cartItemsContainer = $("#cartItems").empty();
      if (!state.cartItems.length) {
        $cartItemsContainer.html('<div class="no-items">–í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π</div>');
      } else {
        state.cartItems.forEach(item => {
          const $cartItem = $("<div>")
            .addClass("cart-item")
            .html(`
              <div class="cart-item-info">
                <h3 class="cart-item-name">${item.name}</h3>
                <div class="cart-item-price">${item.price} –≥—Ä–Ω</div>
              </div>
              <div class="cart-item-quantity">
                <button class="quantity-btn decrease" data-id="${item.id}">-</button>
                <span>${item.quantity}</span>
                <button class="quantity-btn increase" data-id="${item.id}">+</button>
              </div>
            `);
          $cartItemsContainer.append($cartItem);
        });
      }
      updateTotal();
    }

    // –ó–º—ñ–Ω–∞ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Å—Ç—Ä–∞–≤–∏ —É –∫–æ—à–∏–∫—É
    function changeQuantity(itemId, increment) {
      const item = state.cartItems.find(i => i.id === itemId);
      if (!item) return;
      item.quantity += increment;
      if (item.quantity <= 0) {
        state.cartItems = state.cartItems.filter(i => i.id !== itemId);
      }
      updateCartItems();
      updateCartCount();
    }

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–æ—ó —Å—É–º–∏
    function updateTotal() {
      const totalSum = state.cartItems.reduce((sum, item) => sum + item.price * item.quantity, 0);
      $("#cartTotal").text(`–†–∞–∑–æ–º: ${totalSum} –≥—Ä–Ω`);
    }

    // –û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    function checkout() {
      if (!state.cartItems.length) {
        alert("–ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π!");
        return;
      }
      
      const totalSum = state.cartItems.reduce((sum, item) => sum + item.price * item.quantity, 0);
      const orderData = {
        chatId: state.currentUser.id,
        userName: state.currentUser.name,
        items: state.cartItems.map(({ id, name, price, quantity }) => ({ id, name, price, quantity })),
        total: totalSum,
        status: "–û—á—ñ–∫—É—î—Ç—å—Å—è",
        dateTime: new Date().toISOString()
      };
      try {
        telegramApp.sendData(JSON.stringify(orderData));
        showSuccess();
        resetCartState();
      } catch (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–∏—Ö:", error);
        alert("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
      }
    }

    // –ü–æ–∫–∞–∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—à–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    function showSuccess() {
      $("#cartOverlay").hide();
      $("#cartContainer").removeClass("active");
      $("#successModal").css("display", "flex");
      setTimeout(() => $("#successModal").css("display", "none"), 3000);
    }

    // –°–∫–∏–¥–∞–Ω–Ω—è —Å—Ç–∞–Ω—É –∫–æ—à–∏–∫–∞
    function resetCartState() {
      state.cartItems = [];
      $('#cartTitle').text('–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è');
      updateCartItems();
      updateCartCount();
    }

    // --- –§–£–ù–ö–¶–Ü–á –î–õ–Ø –ú–û–î–ê–õ–¨–ù–û–ì–û –í–Ü–ö–ù–ê –°–¢–†–ê–í–ò ---

    // –ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–µ–π —Å—Ç—Ä–∞–≤–∏ —É –º–æ–¥–∞–ª—å–Ω–æ–º—É –≤—ñ–∫–Ω—ñ
    function showDishModal(itemId) {
      const item = state.menuItems.find(i => i.id === itemId);
      if (!item) return;
      $("#modalDishImage").attr("src", item.image);
      $("#modalDishName").text(item.name);
      $("#modalDishDescription").text(item.description);
      $("#modalDishPrice").text(`${item.price} –≥—Ä–Ω`);
      $("#modalAddToCartBtn").data("id", item.id);
      $("#dishModalOverlay").css("display", "flex");
    }

    // --- –§–£–ù–ö–¶–Ü–á –î–õ–Ø –ß–ê–¢–£ ---

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ —á–∞—Ç—É
    const chatFab = $('#chatFab');
    const chatWindow = $('#chatWindow');
    const closeChatBtn = $('#closeChatBtn');
    const chatBody = $('#chatBody');
    const chatInput = $('#chatInput');
    const sendChatBtn = $('#sendChatBtn');
    let chatHistory = []; // –Ü—Å—Ç–æ—Ä—ñ—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å

    // –í—ñ–¥–∫—Ä–∏—Ç—Ç—è/–∑–∞–∫—Ä–∏—Ç—Ç—è —á–∞—Ç—É
    const toggleChat = () => {
      chatWindow.toggleClass('open');
    };

    // –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
    const addMessageToUI = (message, sender) => {
      const messageEl = $('<div>').addClass('chat-message').addClass(sender).text(message);
      chatBody.append(messageEl);
      chatBody.scrollTop(chatBody.prop("scrollHeight"));
    };

    // –ü–æ–∫–∞–∑ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –Ω–∞–±–æ—Ä—É —Ç–µ–∫—Å—Ç—É
    const showTypingIndicator = show => {
      $('.chat-message.typing').remove();
      if (show) {
        const typingEl = $('<div>').addClass('chat-message bot typing').text('–ê—Å–∏—Å—Ç–µ–Ω—Ç –¥—Ä—É–∫—É—î...');
        chatBody.append(typingEl);
        chatBody.scrollTop(chatBody.prop("scrollHeight"));
      }
    };

    // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É —á–∞—Ç
    const handleSendMessage = async () => {
      const message = chatInput.val().trim();
      if (!message) return;
      addMessageToUI(message, 'user');
      chatHistory.push({ role: 'user', parts: [{ text: message }] });
      chatInput.val('');
      showTypingIndicator(true);
      try {
        const response = await axios.post(`${state.API_BASE_URL}/api/chat`, {
          message,
          history: chatHistory.slice(0, -1)
        });
        const reply = response.data.reply;
        showTypingIndicator(false);
        addMessageToUI(reply, 'bot');
        chatHistory.push({ role: 'model', parts: [{ text: reply }] });
      } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ —á–∞—Ç—É:', error);
        showTypingIndicator(false);
        addMessageToUI(error.response?.data?.error || '–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.', 'bot');
      }
    };

    // --- –û–ë–†–û–ë–ù–ò–ö–ò –ü–û–î–Ü–ô ---

    $(document).ready(() => {
      // –ü–æ—á–∞—Ç–∫–æ–≤–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
      loadMenu();

      // –í–∏–±—ñ—Ä –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –º–µ–Ω—é
      $(".categories").on("click", ".category", function() {
        $(".category").removeClass("active");
        $(this).addClass("active");
        displayMenu($(this).data("category"));
      });

      // –í—ñ–¥–∫—Ä–∏—Ç—Ç—è/–∑–∞–∫—Ä–∏—Ç—Ç—è –∫–æ—à–∏–∫–∞
      $("#openCart").on("click", () => {
        $("#cartOverlay").show();
        updateCartItems();
        setTimeout(() => $("#cartContainer").addClass("active"), 10);
      });

      $("#closeCart, #cartOverlay").on("click", function(e) {
        if (e.target === this) {
          $("#cartContainer").removeClass("active");
          setTimeout(() => $("#cartOverlay").hide(), 300);
        }
      });

      // –ó–º—ñ–Ω–∞ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —É –∫–æ—à–∏–∫—É
      $("#cartItems").on("click", ".quantity-btn", function() {
        const isIncrease = $(this).hasClass("increase");
        changeQuantity(parseInt($(this).data("id")), isIncrease ? 1 : -1);
      });

      // –û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
      $("#checkoutBtn").on("click", checkout);

      // –î–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ –∫–æ—à–∏–∫–∞ –∑ –∫–∞—Ä—Ç–∫–∏ —Å—Ç—Ä–∞–≤–∏
      $("#menuContainer").on("click", ".add-to-cart", e => {
        e.stopPropagation();
        addToCart(parseInt($(e.currentTarget).data("id")));
      });

      // –í—ñ–¥–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ —Å—Ç—Ä–∞–≤–∏
      $("#menuContainer").on("click", ".dish-card", function() {
        showDishModal(parseInt($(this).data("item-id")));
      });

      // –ó–∞–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ —Å—Ç—Ä–∞–≤–∏
      $("#closeDishModal, #dishModalOverlay").on("click", function(e) {
        if (e.target === this) $("#dishModalOverlay").hide();
      });

      $("#dishModalContainer").on("click", e => e.stopPropagation());

      // –î–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ –∫–æ—à–∏–∫–∞ –∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
      $("#modalAddToCartBtn").on("click", function() {
        addToCart(parseInt($(this).data("id")));
        $("#dishModalOverlay").hide();
      });

      // –ü–æ—à—É–∫ —Å—Ç—Ä–∞–≤
      $("#searchInput").on("input", function() {
        const query = $(this).val().toLowerCase().trim();
        $(".dish-card").each(function() {
          $(this).toggle($(this).find(".dish-name").text().toLowerCase().includes(query));
        });
      });

      // –û–±—Ä–æ–±–∫–∞ –ø–æ–¥—ñ–π —á–∞—Ç—É
      chatFab.on('click', toggleChat);
      closeChatBtn.on('click', toggleChat);
      sendChatBtn.on('click', handleSendMessage);
      chatInput.on('keypress', e => {
        if (e.key === 'Enter') {
          handleSendMessage();
        }
      });
    });