const express = require("express");
const path = require("path");
const bodyParser = require("body-parser");
const mongoose = require("mongoose");
const dotenv = require("dotenv");
const cors = require("cors");
const TelegramBot = require("node-telegram-bot-api");
const http = require("http");
const multer = require("multer");
const fs = require("fs");
const { GoogleGenerativeAI } = require("@google/generative-ai");

dotenv.config();



// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Google Generative AI
const genAI = new GoogleGenerativeAI(process.env.GOOGLE_API_KEY);
const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–æ–¥–∞—Ç–∫—É —Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞
const app = express();
const server = http.createServer(app);
const bot = new TelegramBot(process.env.TELEGRAM_TOKEN);
const PORT = process.env.PORT || 3000;

// –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
const config = {
  MONGODB_URI: process.env.MONGODB_URI,
  WEBAPP_URL: process.env.WEBAPP_URL,
  ADMIN_IDS: process.env.ADMIN_IDS.split(",").map(Number),
};

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è WebHook –¥–ª—è Telegram
bot.setWebHook(`${config.WEBAPP_URL}/bot${process.env.TELEGRAM_TOKEN}`);

// --- MIDDLEWARE ---

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è middleware
app.use(cors());
app.use(express.static(path.join(__dirname, "public")));
app.use(bodyParser.json());

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Multer –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω—å
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    const dir = path.join(__dirname, "public/images/menu");
    fs.mkdirSync(dir, { recursive: true });
    cb(null, dir);
  },
  filename: (req, file, cb) => {
    cb(null, `${Date.now()}${path.extname(file.originalname)}`);
  },
});
const upload = multer({ storage });



// –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB
mongoose
  .connect(config.MONGODB_URI, {
    serverSelectionTimeoutMS: 30000,
    socketTimeoutMS: 45000,
    connectTimeoutMS: 30000,
    maxPoolSize: 10,
    minPoolSize: 5,
  })
  .then(() => console.log("‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ MongoDB"))
  .catch(err => {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB:", err);
    process.exit(1);
  });

// –û–±—Ä–æ–±–∫–∞ –ø–æ–¥—ñ–π MongoDB
mongoose.connection.on("error", err => console.error("‚ùå MongoDB connection error:", err));
mongoose.connection.on("disconnected", () => console.log("‚ö†Ô∏è MongoDB disconnected"));
mongoose.connection.on("reconnected", () => console.log("‚úÖ MongoDB reconnected"));

// –°—Ö–µ–º–∏ MongoDB
const menuSchema = new mongoose.Schema({
  id: { type: Number, unique: true, required: true },
  name: String,
  description: String,
  price: Number,
  image: String,
  category: String,
  ratings: { type: [Number], default: [] },
  averageRating: { type: Number, default: 0 },
});

const orderSchema = new mongoose.Schema({
  chatId: String,
  userName: String,
  items: [{ id: Number, name: String, price: Number, quantity: Number }],
  total: Number,
  status: { type: String, default: "–û—á—ñ–∫—É—î—Ç—å—Å—è" },
  dateTime: { type: Date, default: Date.now },
  acceptedAt: { type: Date } // –ü–æ–ª–µ –¥–ª—è –¥–∞—Ç–∏ –ø—Ä–∏–π–Ω—è—Ç—Ç—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
});

// –Ü–Ω–¥–µ–∫—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ 2 –≥–æ–¥–∏–Ω–∏ (7200 —Å–µ–∫—É–Ω–¥) –ø—ñ—Å–ª—è –¥–∞—Ç–∏ –≤ `acceptedAt`
orderSchema.index({ "acceptedAt": 1 }, { expireAfterSeconds: 7200 });

const Menu = mongoose.model("Menu", menuSchema);
const Order = mongoose.model("Order", orderSchema);

// --- TELEGRAM BOT –õ–û–ì–Ü–ö–ê ---

bot.onText(/\/start/, msg => {
  bot.sendMessage(msg.chat.id, "üëã –í—ñ—Ç–∞—î–º–æ —É FoodNow! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", {
    reply_markup: {
      keyboard: [
        [{ text: "üõí –ó–∞–º–æ–≤–∏—Ç–∏ —ó–∂—É", web_app: { url: config.WEBAPP_URL } }],
      ],
      resize_keyboard: true,
    },
  });
});

bot.onText(/\/admin/, msg => {
  const chatId = msg.chat.id;
  if (!config.ADMIN_IDS.includes(chatId)) {
    return bot.sendMessage(chatId, "‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.");
  }
  bot.sendMessage(chatId, "üë®‚Äçüíº –ü–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", {
    reply_markup: {
      inline_keyboard: [[
        { text: "üöÄ –£–≤—ñ–π—Ç–∏ –≤ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å", web_app: { url: `${config.WEBAPP_URL}/admin.html?adminId=${chatId}` } },
      ]],
    },
  });
});

bot.on("message", async msg => {
  if (!msg.web_app_data) return;
  try {
    const data = JSON.parse(msg.web_app_data.data);
    // –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    console.log("Received msg.from:", msg.from);
    console.log("Received web_app_data:", data);
    
    const chatId = data.chatId && data.chatId !== "unknown" ? data.chatId.toString() : msg.chat.id.toString();
    const userName = data.userName && data.userName !== "unknown" 
      ? data.userName 
      : msg.from.username 
        ? `@${msg.from.username}` 
        : `${msg.from.first_name || ''} ${msg.from.last_name || ''}`.trim() || '–ê–Ω–æ–Ω—ñ–º';
    
    console.log("Determined userName:", userName); // –õ–æ–≥ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
    
    const order = new Order({
      chatId,
      userName,
      items: data.items,
      total: data.total,
      status: "–û—á—ñ–∫—É—î—Ç—å—Å—è",
      dateTime: new Date(data.dateTime),
    });
    await order.save();
    const orderIdShort = order._id.toString().slice(-6).toUpperCase();
    
    await bot.sendMessage(
      chatId,
      `‚úÖ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ${orderIdShort} –ø—Ä–∏–π–Ω—è—Ç–æ.\n–°—Ç–∞—Ç—É—Å: –û—á—ñ–∫—É—î—Ç—å—Å—è\n–°—É–º–∞: ${data.total} –≥—Ä–Ω`
    );
    
    const orderDetails = data.items
      .map(item => `‚Ä¢ ${item.name} x${item.quantity} - ${item.price * item.quantity} –≥—Ä–Ω`)
      .join("\n");
      
    for (const adminId of config.ADMIN_IDS) {
      await bot.sendMessage(
        adminId,
        `üîî *–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ${orderIdShort}*\n\n` +
        `*–í—ñ–¥:* ${userName} (ID: \`${chatId}\`)\n` +
        `*–°–∫–ª–∞–¥:*\n${orderDetails}\n` +
        `*–°—É–º–∞:* ${data.total} –≥—Ä–Ω\n` +
        `*–ß–∞—Å:* ${new Date().toLocaleString("uk-UA")}`,
        { parse_mode: "Markdown" }
      );
    }
    setTimeout(async () => {
      const uniqueItemsToRate = data.items.reduce((acc, current) => {
        if (!acc.find(item => item.id === current.id)) {
          acc.push(current);
        }
        return acc;
      }, []);
      for (const item of uniqueItemsToRate) {
        const ratingKeyboard = {
          inline_keyboard: [
            [
              { text: "1 ‚≠ê", callback_data: `rate_${order._id}_${item.id}_1` },
              { text: "2 ‚≠ê", callback_data: `rate_${order._id}_${item.id}_2` },
              { text: "3 ‚≠ê", callback_data: `rate_${order._id}_${item.id}_3` },
              { text: "4 ‚≠ê", callback_data: `rate_${order._id}_${item.id}_4` },
              { text: "5 ‚≠ê", callback_data: `rate_${order._id}_${item.id}_5` },
            ],
          ],
        };
        await bot.sendMessage(
          chatId,
          `–ë—É–¥—å –ª–∞—Å–∫–∞, –æ—Ü—ñ–Ω—ñ—Ç—å "${item.name}" –∑ –≤–∞—à–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ${orderIdShort}:`,
          { reply_markup: ratingKeyboard }
        );
      }
    }, 10000);
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:", error);
  }
});

bot.on("callback_query", async query => {
  const [action, orderId, itemId, rating] = query.data.split("_");
  if (action === "rate") {
    try {
      const item = await Menu.findOne({ id: parseInt(itemId) });
      if (!item) {
        await bot.answerCallbackQuery(query.id, { text: "–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
        return;
      }
      item.ratings.push(parseInt(rating));
      item.averageRating = Number(
        (item.ratings.reduce((acc, r) => acc + r, 0) / item.ratings.length).toFixed(1)
      );
      await item.save();
      await bot.answerCallbackQuery(query.id, { text: `–î—è–∫—É—î–º–æ –∑–∞ –æ—Ü—ñ–Ω–∫—É ${rating} ‚≠ê!` });
      await bot.deleteMessage(query.message.chat.id, query.message.message_id);
    } catch (error) {
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –æ—Ü—ñ–Ω–∫–∏:", error);
      await bot.answerCallbackQuery(query.id, { text: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –æ—Ü—ñ–Ω–∫–∏" });
    }
  }
});

// --- API –ú–ê–†–®–†–£–¢–ò ---

app.post(`/bot${process.env.TELEGRAM_TOKEN}`, (req, res) => {
  bot.processUpdate(req.body);
  res.sendStatus(200);
});

app.post("/api/chat", async (req, res) => {
  try {
    const { message, history } = req.body;
    const menuItems = await Menu.find({}, 'name description category price');
    const menuContext = menuItems.map(item =>
      `- ${item.name} (–ö–∞—Ç–µ–≥–æ—Ä—ñ—è: ${item.category}, –¶—ñ–Ω–∞: ${item.price} –≥—Ä–Ω): ${item.description}`
    ).join("\n");
    const systemPrompt = `
      –í–∏ ‚Äî –¥–æ–±—Ä–æ–∑–∏—á–ª–∏–≤–∏–π AI-–ø–æ–º—ñ—á–Ω–∏–∫ —É —Å–µ—Ä–≤—ñ—Å—ñ –¥–æ—Å—Ç–∞–≤–∫–∏ —ó–∂—ñ "FoodNow".
      –í–∞—à–µ –∑–∞–≤–¥–∞–Ω–Ω—è ‚Äî –¥–æ–ø–æ–º–∞–≥–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º –æ–±–∏—Ä–∞—Ç–∏ —Å—Ç—Ä–∞–≤–∏ –∑ –Ω–∞—à–æ–≥–æ –º–µ–Ω—é.
      –ó–∞–≤–∂–¥–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é. –ë—É–¥—å—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–º, –≤–≤—ñ—á–ª–∏–≤–∏–º —ñ –∫–æ—Ä–∏—Å–Ω–∏–º.

      –û—Å—å –ê–ö–¢–£–ê–õ–¨–ù–ï –ú–ï–ù–Æ, –Ω–∞ —è–∫–µ –≤–∏ –ø–æ–≤–∏–Ω–Ω—ñ —Å–ø–∏—Ä–∞—Ç–∏—Å—è:
      --- –ú–ï–ù–Æ ---
      ${menuContext}
      --- –ö–Ü–ù–ï–¶–¨ –ú–ï–ù–Æ ---

      –ü—Ä–∞–≤–∏–ª–∞ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è:
      - –ù—ñ–∫–æ–ª–∏ –Ω–µ –≤–∏–≥–∞–¥—É–π—Ç–µ —Å—Ç—Ä–∞–≤–∏, —è–∫–∏—Ö –Ω–µ–º–∞—î –≤ –º–µ–Ω—é.
      - –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—Ä–æ—Å–∏—Ç—å —â–æ—Å—å, —á–æ–≥–æ –Ω–µ–º–∞—î, –∑–∞–ø—Ä–æ–ø–æ–Ω—É–π—Ç–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É –∑ –º–µ–Ω—é.
      - –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞—î, —â–æ –æ–±—Ä–∞—Ç–∏, —Å—Ç–∞–≤—Ç–µ —É—Ç–æ—á–Ω—é—é—á—ñ –ø–∏—Ç–∞–Ω–Ω—è.
      - –ù–∞ –ø—Ä—è–º–µ –ø–∏—Ç–∞–Ω–Ω—è "—â–æ –ø–æ—Ä–∞–¥–∏—à?" –ø—Ä–æ–ø–æ–Ω—É–π—Ç–µ 2-3 –ø–æ–ø—É–ª—è—Ä–Ω—ñ —Å—Ç—Ä–∞–≤–∏.
      - –ù–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ Markdown —É –≤—ñ–¥–ø–æ–≤—ñ–¥—è—Ö.
    `;
    const chatHistory = history.map(h => ({
      role: h.role,
      parts: [{ text: h.parts[0].text }]
    }));
    const chat = model.startChat({
      history: [
        { role: 'user', parts: [{ text: systemPrompt }] },
        { role: 'model', parts: [{ text: '–ó–≤—ñ—Å–Ω–æ, —è –≥–æ—Ç–æ–≤–∏–π –¥–æ–ø–æ–º–æ–≥—Ç–∏ –≤–∞–º –∑ –≤–∏–±–æ—Ä–æ–º!' }] },
        ...chatHistory
      ]
    });
    const result = await chat.sendMessage(message);
    const response = result.response;
    const text = response.text();
    res.json({ reply: text });
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ AI —á–∞—Ç—É:", error);
    res.status(500).json({ error: "–í–∏–±–∞—á—Ç–µ, –º—ñ–π AI-–ø–æ–º—ñ—á–Ω–∏–∫ –∑–∞—Ä–∞–∑ –Ω–µ –≤ –≥—É–º–æ—Ä—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ." });
  }
});

app.get("/api/menu", async (req, res) => {
  try {
    const menu = await Menu.find().sort({ id: 1 });
    res.json(menu);
  } catch (error) {
    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

app.get("/api/menu/recommendations/:id", async (req, res) => {
  try {
    const currentItemId = parseInt(req.params.id);
    const currentItem = await Menu.findOne({ id: currentItemId });
    if (!currentItem) {
      return res.status(404).json({ error: "–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
    }
    const recommendations = await Menu.aggregate([
      { $match: { category: currentItem.category, id: { $ne: currentItemId } } },
      { $sample: { size: 3 } },
    ]);
    res.json(recommendations);
  } catch (error) {
    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

app.post("/api/menu", upload.single("image"), async (req, res) => {
  try {
    const { adminId, name, description, price, category } = req.body;
    if (!config.ADMIN_IDS.includes(parseInt(adminId))) {
      return res.status(403).json({ error: "–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ" });
    }
    const lastItem = await Menu.findOne().sort({ id: -1 });
    const newId = lastItem ? lastItem.id + 1 : 1;
    const imageUrl = req.file ? `/images/menu/${req.file.filename}` : "/images/logoFoodNow.png";
    const newItem = new Menu({ id: newId, name, description, price, category, image: imageUrl });
    await newItem.save();
    res.status(201).json({ success: true, item: newItem });
  } catch (error) {
    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

app.put("/api/menu/:id", upload.single("image"), async (req, res) => {
  try {
    const { adminId, name, description, price, category } = req.body;
    if (!config.ADMIN_IDS.includes(parseInt(adminId))) {
      return res.status(403).json({ error: "–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ" });
    }
    const updateData = { name, description, price, category };
    if (req.file) {
      const oldItem = await Menu.findOne({ id: req.params.id });
      if (oldItem?.image?.startsWith("/images/menu/")) {
        fs.unlink(path.join(__dirname, "public", oldItem.image), err =>
          err && console.error("–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è:", err)
        );
      }
      updateData.image = `/images/menu/${req.file.filename}`;
    }
    const updatedItem = await Menu.findOneAndUpdate(
      { id: req.params.id },
      updateData,
      { new: true }
    );
    if (!updatedItem) {
      return res.status(404).json({ error: "–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
    }
    res.json({ success: true, item: updatedItem });
  } catch (error) {
    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

app.delete("/api/menu/:id", async (req, res) => {
  try {
    const { adminId } = req.body;
    if (!config.ADMIN_IDS.includes(parseInt(adminId))) {
      return res.status(403).json({ error: "–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ" });
    }
    const deletedItem = await Menu.findOneAndDelete({ id: req.params.id });
    if (!deletedItem) {
      return res.status(404).json({ error: "–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
    }
    if (deletedItem.image?.startsWith("/images/menu/")) {
      fs.unlink(path.join(__dirname, "public", deletedItem.image), err =>
        err && console.error("–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è:", err)
      );
    }
    res.json({ success: true, message: "–¢–æ–≤–∞—Ä –≤–∏–¥–∞–ª–µ–Ω–æ" });
  } catch (error) {
    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

app.post("/api/menu/:id/rate", async (req, res) => {
  try {
    const { rating } = req.body;
    if (!rating || rating < 1 || rating > 5) {
      return res.status(400).json({ error: "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥" });
    }
    const item = await Menu.findOne({ id: req.params.id });
    if (!item) {
      return res.status(404).json({ error: "–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
    }
    item.ratings.push(rating);
    item.averageRating = Number(
      (item.ratings.reduce((acc, r) => acc + r, 0) / item.ratings.length).toFixed(1)
    );
    await item.save();
    res.json({ success: true, averageRating: item.averageRating });
  } catch (error) {
    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

app.get("/api/orders", async (req, res) => {
  try {
    const { adminId, userId } = req.query;
    // –î–ª—è –∞–¥–º—ñ–Ω–∞ –ø–æ–∫–∞–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, —â–æ –æ—á—ñ–∫—É—é—Ç—å
    const query = adminId && config.ADMIN_IDS.includes(parseInt(adminId))
      ? { status: "–û—á—ñ–∫—É—î—Ç—å—Å—è" }
      : userId ? { chatId: userId } : {};
    const orders = await Order.find(query).sort({ dateTime: -1 });
    res.json(orders);
  } catch (error) {
    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

app.post("/api/orders/update-status/:id", async (req, res) => {
  try {
    const { adminId, status } = req.body;
    if (!config.ADMIN_IDS.includes(parseInt(adminId))) {
      return res.status(403).json({ error: "–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ" });
    }
    const order = await Order.findById(req.params.id);
    if (!order) {
      return res.status(404).json({ error: "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
    }
    order.status = status;
    // –Ø–∫—â–æ —Å—Ç–∞—Ç—É—Å '–ü—Ä–∏–π–Ω—è—Ç–æ', –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è
    if (status === "–ü—Ä–∏–π–Ω—è—Ç–æ") {
        order.acceptedAt = new Date();
    }
    await order.save();
    const orderIdShort = order._id.toString().slice(-6).toUpperCase();

    // –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    const finalMessage = status === "–ü—Ä–∏–π–Ω—è—Ç–æ"
        ? `‚úÖ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ*${orderIdShort}* –ø—Ä–∏–π–Ω—è—Ç–æ —Ç–∞ –≥–æ—Ç—É—î—Ç—å—Å—è!`
        : `üîî –°—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ*${orderIdShort}*: *${status}*`;

    await bot.sendMessage(order.chatId, finalMessage, { parse_mode: "Markdown" });
    
    res.json({ success: true, order });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É:", error);
    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

app.get("/api/analytics/summary", async (req, res) => {
  try {
    const { adminId } = req.query;
    if (!config.ADMIN_IDS.includes(parseInt(adminId))) {
      return res.status(403).json({ error: "–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ" });
    }
    const salesByCategory = await Order.aggregate([
      { $unwind: "$items" },
      { $lookup: { from: "menus", localField: "items.id", foreignField: "id", as: "menuItem" } },
      { $unwind: "$menuItem" },
      { $group: { _id: "$menuItem.category", totalSales: { $sum: { $multiply: ["$items.price", "$items.quantity"] } } } },
      { $sort: { totalSales: -1 } },
    ]);
    const topSellingItems = await Order.aggregate([
      { $unwind: "$items" },
      { $group: { _id: "$items.name", totalQuantity: { $sum: "$items.quantity" } } },
      { $sort: { totalQuantity: -1 } },
      { $limit: 5 },
    ]);
    res.json({ salesByCategory, topSellingItems });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏:", error);
    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// --- –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê ---
server.listen(PORT, () => console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ http://localhost:${PORT}`));