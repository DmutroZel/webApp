const express = require("express");
const path = require("path");
const bodyParser = require("body-parser");
const mongoose = require("mongoose");
const dotenv = require("dotenv");
const cors = require("cors");
const TelegramBot = require("node-telegram-bot-api");
const http = require("http");
const { Server } = require("socket.io");
const multer = require("multer");
const fs = require("fs");
const { v4: uuidv4 } = require('uuid');
const { GoogleGenerativeAI } = require("@google/generative-ai");
dotenv.config();


const genAI = new GoogleGenerativeAI(process.env.GOOGLE_API_KEY);
const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash"});

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–æ–¥–∞—Ç–∫—É —Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞
const app = express();
const server = http.createServer(app);
const io = new Server(server, {
  cors: { origin: "*", methods: ["GET", "POST"] },
});
const bot = new TelegramBot(process.env.TELEGRAM_TOKEN);
const PORT = process.env.PORT || 3000;

// –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
const config = {
  MONGODB_URI: process.env.MONGODB_URI,
  WEBAPP_URL: process.env.WEBAPP_URL,
  ADMIN_IDS: process.env.ADMIN_IDS.split(",").map(Number),
};

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è WebHook
bot.setWebHook(`${config.WEBAPP_URL}/bot${process.env.TELEGRAM_TOKEN}`);

// Middleware
app.use(cors());
app.use(express.static(path.join(__dirname, "public")));
app.use(bodyParser.json());

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Multer –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω—å
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    const dir = path.join(__dirname, "public/images/menu");
    fs.mkdirSync(dir, { recursive: true });
    cb(null, dir);
  },
  filename: (req, file, cb) => {
    cb(null, `${Date.now()}${path.extname(file.originalname)}`);
  },
});
const upload = multer({ storage });

// MongoDB –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
mongoose
  .connect(config.MONGODB_URI, {
    serverSelectionTimeoutMS: 30000,
    socketTimeoutMS: 45000,
    connectTimeoutMS: 30000,
    maxPoolSize: 10,
    minPoolSize: 5,
  })
  .then(() => console.log("‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ MongoDB"))
  .catch((err) => {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB:", err);
    process.exit(1);
  });

mongoose.connection.on("error", (err) =>
  console.error("‚ùå MongoDB connection error:", err)
);
mongoose.connection.on("disconnected", () =>
  console.log("‚ö†Ô∏è MongoDB disconnected")
);
mongoose.connection.on("reconnected", () => console.log("‚úÖ MongoDB reconnected"));

// –°—Ö–µ–º–∏ MongoDB
const menuSchema = new mongoose.Schema({
  id: { type: Number, unique: true, required: true },
  name: String,
  description: String,
  price: Number,
  image: String,
  category: String,
  ratings: { type: [Number], default: [] },
  averageRating: { type: Number, default: 0 },
});

const orderSchema = new mongoose.Schema({
  chatId: String,
  userName: String,
  items: [{ id: Number, name: String, price: Number, quantity: Number, addedBy: String }],
  total: Number,
  status: { type: String, default: "–û—á—ñ–∫—É—î—Ç—å—Å—è" },
  dateTime: { type: Date, default: Date.now },
});

const groupCartSchema = new mongoose.Schema({
    inviteCode: { type: String, unique: true, required: true },
    ownerId: { type: String, required: true },
    participants: [{ id: String, name: String }],
    items: [{
        id: Number,
        name: String,
        price: Number,
        quantity: Number,
        addedBy: String // userName of the user who added the item
    }],
    createdAt: { type: Date, default: Date.now, expires: '2h' } // Automatically delete after 2 hours
});


const Menu = mongoose.model("Menu", menuSchema);
const Order = mongoose.model("Order", orderSchema);
const GroupCart = mongoose.model('GroupCart', groupCartSchema);


// WebSocket –ª–æ–≥—ñ–∫–∞
const userSockets = {};
io.on("connection", (socket) => {
  console.log(`üîó –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—ñ–¥–∫–ª—é—á–∏–≤—Å—è: ${socket.id}`);

  socket.on("register", (userId) => {
    userSockets[userId] = socket.id;
    console.log(`üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${userId} –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π`);
  });

  // Group Cart Logic
  socket.on('create_group_cart', async (data) => {
      const { ownerId, ownerName } = data;
      const inviteCode = uuidv4().slice(0, 8); // Unique 8-char code
      const groupCart = new GroupCart({
          inviteCode,
          ownerId,
          participants: [{ id: ownerId, name: ownerName }],
          items: []
      });
      await groupCart.save();
      socket.join(inviteCode);
      socket.emit('group_cart_created', { inviteCode });
  });

  socket.on('join_group_cart', async (data) => {
      const { inviteCode, userId, userName } = data;
      const groupCart = await GroupCart.findOne({ inviteCode });
      if (groupCart) {
          if (!groupCart.participants.some(p => p.id === userId)) {
              groupCart.participants.push({ id: userId, name: userName });
              await groupCart.save();
          }
          socket.join(inviteCode);
          io.to(inviteCode).emit('group_cart_updated', groupCart);
      } else {
          socket.emit('error', { message: 'Group cart not found' });
      }
  });

  socket.on('add_to_group_cart', async (data) => {
      const { inviteCode, item, userName } = data;
      const groupCart = await GroupCart.findOne({ inviteCode });
      if (groupCart) {
          const existingItem = groupCart.items.find(i => i.id === item.id && i.addedBy === userName);
          if (existingItem) {
              existingItem.quantity++;
          } else {
              groupCart.items.push({ ...item, quantity: 1, addedBy: userName });
          }
          await groupCart.save();
          io.to(inviteCode).emit('group_cart_updated', groupCart);
      }
  });

  socket.on('update_group_cart_item', async ({ inviteCode, itemId, quantity, userName }) => {
      const groupCart = await GroupCart.findOne({ inviteCode });
      if (groupCart) {
          const item = groupCart.items.find(i => i.id === itemId && i.addedBy === userName);
          if (item) {
              item.quantity = quantity;
              if (item.quantity <= 0) {
                  groupCart.items = groupCart.items.filter(i => !(i.id === itemId && i.addedBy === userName));
              }
              await groupCart.save();
              io.to(inviteCode).emit('group_cart_updated', groupCart);
          }
      }
  });

  socket.on("disconnect", () => {
    for (const [userId, socketId] of Object.entries(userSockets)) {
      if (socketId === socket.id) {
        delete userSockets[userId];
        console.log(`üëª –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${userId} –≤—ñ–¥–∫–ª—é—á–∏–≤—Å—è`);
        break;
      }
    }
  });
});

// Telegram Bot –ª–æ–≥—ñ–∫–∞
bot.onText(/\/start/, (msg) => {
  const deepLinkPayload = msg.text.split(' ')[1];
  let webAppUrl = config.WEBAPP_URL;

  if (deepLinkPayload && deepLinkPayload.startsWith('groupCart_')) {
      const inviteCode = deepLinkPayload.replace('groupCart_', '');
      webAppUrl = `${config.WEBAPP_URL}/index.html?groupCart=${inviteCode}`;
  }

  bot.sendMessage(msg.chat.id, "üëã –í—ñ—Ç–∞—î–º–æ —É FoodNow! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", {
    reply_markup: {
      keyboard: [
        [{ text: "üõí –ó–∞–º–æ–≤–∏—Ç–∏ —ó–∂—É", web_app: { url: webAppUrl } }],
        [
          {
            text: "üìä –ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è",
            web_app: { url: `${config.WEBAPP_URL}/orders.html?userId=${msg.chat.id}` },
          },
        ],
      ],
      resize_keyboard: true,
    },
  });
});


bot.onText(/\/admin/, (msg) => {
  const chatId = msg.chat.id;
  if (!config.ADMIN_IDS.includes(chatId)) {
    return bot.sendMessage(chatId, "‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.");
  }
  bot.sendMessage(chatId, "üë®‚Äçüíº –ü–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", {
    reply_markup: {
      inline_keyboard: [
        [
          {
            text: "üöÄ –£–≤—ñ–π—Ç–∏ –≤ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å",
            web_app: { url: `${config.WEBAPP_URL}/admin.html?adminId=${chatId}` },
          },
        ],
      ],
    },
  });
});

bot.on("message", async (msg) => {
  if (!msg.web_app_data) return;

  try {
    const data = JSON.parse(msg.web_app_data.data);
    const chatId = data.chatId && data.chatId !== "unknown" ? data.chatId.toString() : msg.chat.id.toString();
    const userName = data.userName && data.userName !== "unknown" ? data.userName : msg.from.username || "–ê–Ω–æ–Ω—ñ–º";

    const order = new Order({
      chatId,
      userName,
      items: data.items,
      total: data.total,
      status: "–û—á—ñ–∫—É—î—Ç—å—Å—è",
      dateTime: new Date(data.dateTime),
    });

    await order.save();
    const orderIdShort = order._id.toString().slice(-6).toUpperCase();

    // Notify all participants of the group order if it was a group order
    if (data.isGroupOrder && data.participants) {
        const creatorName = data.participants.find(p => p.id === chatId)?.name || userName;
        for (const participant of data.participants) {
            await bot.sendMessage(
                participant.id,
                `‚úÖ –°–ø—ñ–ª—å–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ${orderIdShort} –≤—ñ–¥ ${creatorName} –±—É–ª–æ —É—Å–ø—ñ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ!\n–°—Ç–∞—Ç—É—Å: –û—á—ñ–∫—É—î—Ç—å—Å—è\n–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: ${data.total} –≥—Ä–Ω`
            );
        }
    } else {
        await bot.sendMessage(
            chatId,
            `‚úÖ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ${orderIdShort} –ø—Ä–∏–π–Ω—è—Ç–æ.\n–°—Ç–∞—Ç—É—Å: –û—á—ñ–∫—É—î—Ç—å—Å—è\n–°—É–º–∞: ${data.total} –≥—Ä–Ω`
        );
    }


    const orderDetails = data.items
      .map((item) => `‚Ä¢ ${item.name} x${item.quantity} (–¥–æ–¥–∞–≤/–ª–∞ ${item.addedBy || '–≤–ª–∞—Å–Ω–∏–∫'}) - ${item.price * item.quantity} –≥—Ä–Ω`)
      .join("\n");

    for (const adminId of config.ADMIN_IDS) {
      await bot.sendMessage(
        adminId,
        `üîî *–ù–æ–≤–µ ${data.isGroupOrder ? '—Å–ø—ñ–ª—å–Ω–µ ' : ''}–∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ${orderIdShort}*\n\n` +
          `*–í—ñ–¥:* @${userName} (ID: \`${chatId}\`)\n` +
          `*–°–∫–ª–∞–¥:*\n${orderDetails}\n` +
          `*–°—É–º–∞:* ${data.total} –≥—Ä–Ω\n` +
          `*–ß–∞—Å:* ${new Date().toLocaleString("uk-UA")}`,
        { parse_mode: "Markdown" }
      );
    }

    setTimeout(async () => {
        // Create a unique list of items to rate to avoid duplicates from multiple users in a group order
        const uniqueItemsToRate = data.items.reduce((acc, current) => {
            if (!acc.find(item => item.id === current.id)) {
                acc.push(current);
            }
            return acc;
        }, []);

        for (const item of uniqueItemsToRate) {
            const ratingKeyboard = {
                inline_keyboard: [
                    [
                        { text: "1 ‚≠ê", callback_data: `rate_${order._id}_${item.id}_1` },
                        { text: "2 ‚≠ê", callback_data: `rate_${order._id}_${item.id}_2` },
                        { text: "3 ‚≠ê", callback_data: `rate_${order._id}_${item.id}_3` },
                        { text: "4 ‚≠ê", callback_data: `rate_${order._id}_${item.id}_4` },
                        { text: "5 ‚≠ê", callback_data: `rate_${order._id}_${item.id}_5` },
                    ],
                ],
            };
            // Send rating request to all participants
            if (data.isGroupOrder && data.participants) {
                for (const participant of data.participants) {
                    await bot.sendMessage(
                        participant.id,
                        `–ë—É–¥—å –ª–∞—Å–∫–∞, –æ—Ü—ñ–Ω—ñ—Ç—å "${item.name}" –∑—ñ —Å–ø—ñ–ª—å–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ${orderIdShort}:`,
                        { reply_markup: ratingKeyboard }
                    );
                }
            } else {
                 await bot.sendMessage(
                    chatId,
                    `–ë—É–¥—å –ª–∞—Å–∫–∞, –æ—Ü—ñ–Ω—ñ—Ç—å "${item.name}" –∑ –≤–∞—à–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ${orderIdShort}:`,
                    { reply_markup: ratingKeyboard }
                );
            }
        }
    }, 10000); // 10 seconds delay
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:", error);
  }
});


bot.on("callback_query", async (query) => {
  const [action, orderId, itemId, rating] = query.data.split("_");
  if (action === "rate") {
    try {
      const item = await Menu.findOne({ id: parseInt(itemId) });
      if (!item) {
        await bot.answerCallbackQuery(query.id, { text: "–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
        return;
      }
      
      // Check if this user has already rated this item for this order to prevent multiple ratings
      // This is a simplified check. A more robust solution would involve a separate Rating model.
      const order = await Order.findById(orderId);
      // For this example, we'll just add the rating without a duplicate check to keep it simple.

      item.ratings.push(parseInt(rating));
      item.averageRating = Number(
        (item.ratings.reduce((acc, r) => acc + r, 0) / item.ratings.length).toFixed(1)
      );
      await item.save();

      await bot.answerCallbackQuery(query.id, { text: `–î—è–∫—É—î–º–æ –∑–∞ –æ—Ü—ñ–Ω–∫—É ${rating} ‚≠ê!` });
      await bot.deleteMessage(query.message.chat.id, query.message.message_id); // –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è –æ—Ü—ñ–Ω–∫–∏
    } catch (error) {
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –æ—Ü—ñ–Ω–∫–∏:", error);
      await bot.answerCallbackQuery(query.id, { text: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –æ—Ü—ñ–Ω–∫–∏" });
    }
  }
});

// API –º–∞—Ä—à—Ä—É—Ç–∏
app.post(`/bot${process.env.TELEGRAM_TOKEN}`, (req, res) => {
  bot.processUpdate(req.body);
  res.sendStatus(200);
});
app.post("/api/chat", async (req, res) => {
  try {
    const { message, history } = req.body;

    // 1. –û—Ç—Ä–∏–º—É—î–º–æ –∞–∫—Ç—É–∞–ª—å–Ω–µ –º–µ–Ω—é –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    const menuItems = await Menu.find({}, 'name description category price');
    const menuContext = menuItems.map(item =>
      `- ${item.name} (–ö–∞—Ç–µ–≥–æ—Ä—ñ—è: ${item.category}, –¶—ñ–Ω–∞: ${item.price} –≥—Ä–Ω): ${item.description}`
    ).join("\n");

    // 2. –°—Ç–≤–æ—Ä—é—î–º–æ —Å–∏—Å—Ç–µ–º–Ω–∏–π –ø—Ä–æ–º–ø—Ç (–º–æ–∑–æ–∫ –Ω–∞—à–æ–≥–æ –∞—Å–∏—Å—Ç–µ–Ω—Ç–∞)
    const systemPrompt = `
      –í–∏ ‚Äî –¥–æ–±—Ä–æ–∑–∏—á–ª–∏–≤–∏–π AI-–ø–æ–º—ñ—á–Ω–∏–∫ —É —Å–µ—Ä–≤—ñ—Å—ñ –¥–æ—Å—Ç–∞–≤–∫–∏ —ó–∂—ñ "FoodNow".
      –í–∞—à–µ –∑–∞–≤–¥–∞–Ω–Ω—è ‚Äî –¥–æ–ø–æ–º–∞–≥–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º –æ–±–∏—Ä–∞—Ç–∏ —Å—Ç—Ä–∞–≤–∏ –∑ –Ω–∞—à–æ–≥–æ –º–µ–Ω—é.
      –ó–∞–≤–∂–¥–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é. –ë—É–¥—å—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–º, –≤–≤—ñ—á–ª–∏–≤–∏–º —ñ –∫–æ—Ä–∏—Å–Ω–∏–º.

      –û—Å—å –ê–ö–¢–£–ê–õ–¨–ù–ï –ú–ï–ù–Æ, –Ω–∞ —è–∫–µ –≤–∏ –ø–æ–≤–∏–Ω–Ω—ñ —Å–ø–∏—Ä–∞—Ç–∏—Å—è:
      --- –ú–ï–ù–Æ ---
      ${menuContext}
      --- –ö–Ü–ù–ï–¶–¨ –ú–ï–ù–Æ ---

      –ü—Ä–∞–≤–∏–ª–∞ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è:
      - –ù—ñ–∫–æ–ª–∏ –Ω–µ –≤–∏–≥–∞–¥—É–π—Ç–µ —Å—Ç—Ä–∞–≤–∏, —è–∫–∏—Ö –Ω–µ–º–∞—î –≤ –º–µ–Ω—é.
      - –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—Ä–æ—Å–∏—Ç—å —â–æ—Å—å, —á–æ–≥–æ –Ω–µ–º–∞—î (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "—Ö–æ—á—É —Ä–∏–±—É"), –∑–∞–ø—Ä–æ–ø–æ–Ω—É–π—Ç–µ –Ω–∞–π–∫—Ä–∞—â—É –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É –∑ –º–µ–Ω—é (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "–£ –Ω–∞—Å –Ω–µ–º–∞—î —Ä–∏–±–∏, –∞–ª–µ –º–æ–∂—É –∑–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ —Å–º–∞—á–Ω—ñ —Å—É—à—ñ –∑ –ª–æ—Å–æ—Å–µ–º").
      - –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞—î, —â–æ –æ–±—Ä–∞—Ç–∏, —Å—Ç–∞–≤—Ç–µ —É—Ç–æ—á–Ω—é—é—á—ñ –ø–∏—Ç–∞–Ω–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "–ß–æ–º—É –± –≤–∏ –Ω–∞–¥–∞–ª–∏ –ø–µ—Ä–µ–≤–∞–≥—É: —á–æ–º—É—Å—å –º'—è—Å–Ω–æ–º—É, —è–∫ –±—É—Ä–≥–µ—Ä, —á–∏ –ª–µ–≥—à–æ–º—É, —è–∫ —Å—É—à—ñ?").
      - –ù–∞ –ø—Ä—è–º–µ –ø–∏—Ç–∞–Ω–Ω—è "—â–æ –ø–æ—Ä–∞–¥–∏—à?" –º–æ–∂–Ω–∞ –∑–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ 2-3 –ø–æ–ø—É–ª—è—Ä–Ω—ñ —Å—Ç—Ä–∞–≤–∏ –∑ —Ä—ñ–∑–Ω–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π.
      - –ù–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ Markdown —É –≤—ñ–¥–ø–æ–≤—ñ–¥—è—Ö.
    `;
    
    // 3. –§–æ—Ä–º—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é —á–∞—Ç—É –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
    const chatHistory = history.map(h => ({
        role: h.role,
        parts: [{ text: h.parts[0].text }]
    }));

    // 4. –°—Ç–≤–æ—Ä—é—î–º–æ —á–∞—Ç –∑ Gemini
    const chat = model.startChat({
      history: [
          { role: 'user', parts: [{ text: systemPrompt }] },
          { role: 'model', parts: [{ text: '–ó–≤—ñ—Å–Ω–æ, —è –≥–æ—Ç–æ–≤–∏–π –¥–æ–ø–æ–º–æ–≥—Ç–∏ –≤–∞–º –∑ –≤–∏–±–æ—Ä–æ–º!' }] },
          ...chatHistory
      ]
    });

    const result = await chat.sendMessage(message);
    const response = result.response;
    const text = response.text();

    res.json({ reply: text });

  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ AI —á–∞—Ç—É:", error);
    res.status(500).json({ error: "–í–∏–±–∞—á—Ç–µ, –º—ñ–π AI-–ø–æ–º—ñ—á–Ω–∏–∫ –∑–∞—Ä–∞–∑ –Ω–µ –≤ –≥—É–º–æ—Ä—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ." });
  }
});
// Menu API
app.get("/api/menu", async (req, res) => {
  try {
    const menu = await Menu.find().sort({ id: 1 });
    res.json(menu);
  } catch (error) {
    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

app.get("/api/menu/recommendations/:id", async (req, res) => {
  try {
    const currentItemId = parseInt(req.params.id);
    const currentItem = await Menu.findOne({ id: currentItemId });
    if (!currentItem) {
      return res.status(404).json({ error: "–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
    }

    const recommendations = await Menu.aggregate([
      { $match: { category: currentItem.category, id: { $ne: currentItemId } } },
      { $sample: { size: 3 } },
    ]);
    res.json(recommendations);
  } catch (error) {
    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// Group Cart API
app.get('/api/group-cart/:inviteCode', async (req, res) => {
    try {
        const { inviteCode } = req.params;
        const groupCart = await GroupCart.findOne({ inviteCode });
        if (!groupCart) {
            return res.status(404).json({ error: '–°–ø—ñ–ª—å–Ω–∏–π –∫–æ—à–∏–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.' });
        }
        res.json(groupCart);
    } catch (error) {
        res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

app.post('/api/group-cart/checkout', async (req, res) => {
    const { inviteCode } = req.body;
    const groupCart = await GroupCart.findOne({ inviteCode });

    if (!groupCart) {
        return res.status(404).json({ error: '–ö–æ—à–∏–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });
    }

    const totalSum = groupCart.items.reduce((sum, item) => sum + item.price * item.quantity, 0);

    const orderData = {
        chatId: groupCart.ownerId,
        userName: groupCart.participants.find(p => p.id === groupCart.ownerId)?.name || '–í–ª–∞—Å–Ω–∏–∫ –∫–æ—à–∏–∫–∞',
        items: groupCart.items,
        total: totalSum,
        status: "–û—á—ñ–∫—É—î—Ç—å—Å—è",
        dateTime: new Date().toISOString(),
        isGroupOrder: true,
        participants: groupCart.participants,
    };
    
    // Simulate sending data via Telegram bot
    const fakeMsg = {
        chat: { id: groupCart.ownerId },
        from: { username: orderData.userName },
        web_app_data: { data: JSON.stringify(orderData) }
    };
    
    // Process the message as if it came from the bot to trigger notifications
    bot.emit('message', fakeMsg);
    
    // Clean up the group cart
    await GroupCart.deleteOne({ inviteCode });

    res.json({ success: true, message: "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ!" });
});


app.post("/api/menu", upload.single("image"), async (req, res) => {
  try {
    const { adminId, name, description, price, category } = req.body;
    if (!config.ADMIN_IDS.includes(parseInt(adminId))) {
      return res.status(403).json({ error: "–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ" });
    }

    const lastItem = await Menu.findOne().sort({ id: -1 });
    const newId = lastItem ? lastItem.id + 1 : 1;
    const imageUrl = req.file ? `/images/menu/${req.file.filename}` : "/images/logoFoodNow.png";

    const newItem = new Menu({ id: newId, name, description, price, category, image: imageUrl });
    await newItem.save();
    res.status(201).json({ success: true, item: newItem });
  } catch (error) {
    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

app.put("/api/menu/:id", upload.single("image"), async (req, res) => {
  try {
    const { adminId, name, description, price, category } = req.body;
    if (!config.ADMIN_IDS.includes(parseInt(adminId))) {
      return res.status(403).json({ error: "–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ" });
    }

    const updateData = { name, description, price, category };
    if (req.file) {
      const oldItem = await Menu.findOne({ id: req.params.id });
      if (oldItem?.image?.startsWith("/images/menu/")) {
        fs.unlink(path.join(__dirname, "public", oldItem.image), (err) =>
          err && console.error("–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è:", err)
        );
      }
      updateData.image = `/images/menu/${req.file.filename}`;
    }

    const updatedItem = await Menu.findOneAndUpdate(
      { id: req.params.id },
      updateData,
      { new: true }
    );
    if (!updatedItem) {
      return res.status(404).json({ error: "–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
    }
    res.json({ success: true, item: updatedItem });
  } catch (error) {
    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

app.delete("/api/menu/:id", async (req, res) => {
  try {
    const { adminId } = req.body;
    if (!config.ADMIN_IDS.includes(parseInt(adminId))) {
      return res.status(403).json({ error: "–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ" });
    }

    const deletedItem = await Menu.findOneAndDelete({ id: req.params.id });
    if (!deletedItem) {
      return res.status(404).json({ error: "–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
    }

    if (deletedItem.image?.startsWith("/images/menu/")) {
      fs.unlink(path.join(__dirname, "public", deletedItem.image), (err) =>
        err && console.error("–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è:", err)
      );
    }
    res.json({ success: true, message: "–¢–æ–≤–∞—Ä –≤–∏–¥–∞–ª–µ–Ω–æ" });
  } catch (error) {
    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

app.post("/api/menu/:id/rate", async (req, res) => {
  try {
    const { rating } = req.body;
    if (!rating || rating < 1 || rating > 5) {
      return res.status(400).json({ error: "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥" });
    }

    const item = await Menu.findOne({ id: req.params.id });
    if (!item) {
      return res.status(404).json({ error: "–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
    }

    item.ratings.push(rating);
    item.averageRating = Number(
      (item.ratings.reduce((acc, r) => acc + r, 0) / item.ratings.length).toFixed(1)
    );

    await item.save();
    res.json({ success: true, averageRating: item.averageRating });
  } catch (error) {
    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// Orders API
app.get("/api/orders", async (req, res) => {
  try {
    const { adminId, userId } = req.query;
    const query = adminId && config.ADMIN_IDS.includes(parseInt(adminId))
      ? {}
      : userId ? { chatId: userId } : {};

    const orders = await Order.find(query).sort({ dateTime: -1 });
    res.json(orders);
  } catch (error) {
    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

app.post("/api/orders/update-status/:id", async (req, res) => {
  try {
    const { adminId, status } = req.body;
    if (!config.ADMIN_IDS.includes(parseInt(adminId))) {
      return res.status(403).json({ error: "–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ" });
    }

    const order = await Order.findById(req.params.id);
    if (!order) {
      return res.status(404).json({ error: "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
    }

    order.status = status;
    await order.save();

    const orderIdShort = order._id.toString().slice(-6).toUpperCase();
    
    // Notify all participants if it's a group order
    if (order.isGroupOrder && order.participants) {
        for (const participant of order.participants) {
             await bot.sendMessage(
                participant.id,
                `üîî –°—Ç–∞—Ç—É—Å —Å–ø—ñ–ª—å–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ*${orderIdShort}*: *${status}*`,
                { parse_mode: "Markdown" }
            );
        }
    } else {
        await bot.sendMessage(
          order.chatId,
          `üîî –°—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ*${orderIdShort}*: *${status}*`,
          { parse_mode: "Markdown" }
        );
    }


    const userSocketId = userSockets[order.chatId];
    if (userSocketId) {
      io.to(userSocketId).emit("status_updated", {
        orderId: order._id,
        status,
      });
    }

    res.json({ success: true, order });
  } catch (error) {
    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

app.get("/api/analytics/summary", async (req, res) => {
  try {
    const { adminId } = req.query;
    if (!config.ADMIN_IDS.includes(parseInt(adminId))) {
      return res.status(403).json({ error: "–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ" });
    }

    const salesByCategory = await Order.aggregate([
      { $unwind: "$items" },
      {
        $lookup: {
          from: "menus",
          localField: "items.id",
          foreignField: "id",
          as: "menuItem",
        },
      },
      { $unwind: "$menuItem" },
      {
        $group: {
          _id: "$menuItem.category",
          totalSales: { $sum: { $multiply: ["$items.price", "$items.quantity"] } },
        },
      },
      { $sort: { totalSales: -1 } },
    ]);

    const topSellingItems = await Order.aggregate([
      { $unwind: "$items" },
      {
        $group: {
          _id: "$items.name",
          totalQuantity: { $sum: "$items.quantity" },
        },
      },
      { $sort: { totalQuantity: -1 } },
      { $limit: 5 },
    ]);

    res.json({ salesByCategory, topSellingItems });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏:", error);
    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
server.listen(PORT, () => console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ http://localhost:${PORT}`));