const TelegramBot = require("node-telegram-bot-api");
const express = require("express");
const path = require("path");
const bodyParser = require("body-parser");
const mongoose = require("mongoose");
const dotenv = require("dotenv");
const cors = require("cors");

dotenv.config();

const TELEGRAM_TOKEN = process.env.TELEGRAM_TOKEN;
const MONGODB_URI = process.env.MONGODB_URI;
const ADMIN_IDS = process.env.ADMIN_IDS.split(",").map(id => parseInt(id));
const WEBAPP_URL = process.env.WEBAPP_URL;
const PORT = process.env.PORT || 3000;

console.log("WebApp URL:", WEBAPP_URL);

const bot = new TelegramBot(TELEGRAM_TOKEN);
const app = express();

app.use(express.static("public"));
app.use(bodyParser.json());
app.use(cors({ origin: WEBAPP_URL }));

mongoose.connect(MONGODB_URI, {
  serverSelectionTimeoutMS: 30000,
  socketTimeoutMS: 45000,
  connectTimeoutMS: 30000,
  maxPoolSize: 10,
  minPoolSize: 5,
})
.then(() => console.log("‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ MongoDB"))
.catch(err => {
  console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB:", err);
  process.exit(1);
});

mongoose.connection.on('error', (err) => {
  console.error('‚ùå MongoDB connection error:', err);
});

mongoose.connection.on('disconnected', () => {
  console.log('‚ö†Ô∏è MongoDB disconnected');
});

mongoose.connection.on('reconnected', () => {
  console.log('‚úÖ MongoDB reconnected');
});

bot.setWebHook(`${WEBAPP_URL}/bot${TELEGRAM_TOKEN}`);

app.post(`/bot${TELEGRAM_TOKEN}`, (req, res) => {
  bot.processUpdate(req.body);
  res.sendStatus(200);
});

bot.on('webhook_error', (error) => {
  console.error('‚ùå Webhook error:', error);
});

bot.on('message', (msg) => {
  console.log('üì® –û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', {
    chat_id: msg.chat.id,
    from: msg.from?.username || '–ê–Ω–æ–Ω—ñ–º',
    text: msg.text,
    web_app_data: !!msg.web_app_data
  });
});

process.on('SIGINT', async () => {
  await mongoose.connection.close();
  console.log('üìã MongoDB connection closed');
  process.exit(0);
});

const menuSchema = new mongoose.Schema({
  id: Number,
  name: String,
  description: String,
  price: Number,
  image: String,
  category: String,
});

const orderSchema = new mongoose.Schema({
  chatId: String,
  userName: String,
  items: [{ id: Number, name: String, price: Number, quantity: Number }],
  total: Number,
  status: { type: String, default: "–û—á—ñ–∫—É—î—Ç—å—Å—è" },
  dateTime: { type: Date, default: Date.now },
});

const Menu = mongoose.model("Menu", menuSchema);
const Order = mongoose.model("Order", orderSchema);

async function initMenu() {
  if (await Menu.countDocuments() === 0) {
    const initialMenu = [
      { id: 1, name: "–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞", description: "–ö–ª–∞—Å–∏—á–Ω–∞ –ø—ñ—Ü–∞...", price: 180, image: `${WEBAPP_URL}/api/placeholder/200/120`, category: "pizza" },
      { id: 2, name: "–ü–µ–ø–µ—Ä–æ–Ω—ñ", description: "–ü—ñ—Ü–∞ –∑ –≥–æ—Å—Ç—Ä–æ—é...", price: 200, image: `${WEBAPP_URL}/api/placeholder/200/120`, category: "pizza" },
      { id: 3, name: "–ö–ª–∞—Å–∏—á–Ω–∏–π –±—É—Ä–≥–µ—Ä", description: "–°–æ–∫–æ–≤–∏—Ç–∏–π –±—É—Ä–≥–µ—Ä...", price: 160, image: `${WEBAPP_URL}/api/placeholder/200/120`, category: "burger" },
    ];
    await Menu.insertMany(initialMenu);
    console.log("üìã –ú–µ–Ω—é —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ");
  }
}
initMenu();

bot.onText(/\/start/, (msg) => {
  bot.sendMessage(msg.chat.id, "üëã –í—ñ–¥–∫—Ä–∏–π WebApp", {
    reply_markup: {
      keyboard: [[{ 
        text: "üõí –ó–∞–º–æ–≤–∏—Ç–∏ —ó–∂—É", 
        web_app: { url: WEBAPP_URL }
      }]],
      resize_keyboard: true,
    },
  });
});

bot.on("message", async (msg) => {
  if (msg.web_app_data) {
    try {
      const data = JSON.parse(msg.web_app_data.data);
      console.log("–û—Ç—Ä–∏–º–∞–Ω–æ –¥–∞–Ω—ñ –∑ WebApp:", data);
      
      const chatId = data.chatId && data.chatId !== "unknown" ? data.chatId.toString() : msg.chat.id.toString();
      const userName = data.userName && data.userName !== "unknown" ? data.userName : (msg.from.username || "–ê–Ω–æ–Ω—ñ–º");
      
      const order = new Order({
        chatId,
        userName,
        items: data.items,
        total: data.total,
        status: "–û—á—ñ–∫—É—î—Ç—å—Å—è",
        dateTime: new Date(data.dateTime),
      });
      
      await order.save();
      console.log("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ:", order._id);
      
      await bot.sendMessage(chatId, `‚úÖ –î—è–∫—É—î–º–æ –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!\nüìã –ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: ${order._id}\n‚è∞ –°—Ç–∞—Ç—É—Å: –û—á—ñ–∫—É—î—Ç—å—Å—è\nüí∞ –°—É–º–∞: ${data.total} –≥—Ä–Ω`);
      console.log(`–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–ª—ñ—î–Ω—Ç—É: ${chatId}`);
      
      const orderDetails = data.items.map(item => `‚Ä¢ ${item.name} x${item.quantity} - ${item.price * item.quantity} –≥—Ä–Ω`).join("\n");
      
      for (const adminId of ADMIN_IDS) {
        await bot.sendMessage(adminId, 
          `üîî –ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!\n` +
          `üë§ –í—ñ–¥: @${userName}\n` +
          `üÜî Chat ID: ${chatId}\n` +
          `üìã –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n${orderDetails}\n` +
          `üí∞ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: ${data.total} –≥—Ä–Ω\n` +
          `‚è∞ –ß–∞—Å: ${new Date().toLocaleString('uk-UA')}`
        );
        console.log(`–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∞–¥–º—ñ–Ω—É: ${adminId}`);
      }
      
    } catch (error) {
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:", error);
    }
  }
});

app.get("/menu", async (req, res) => {
  const menu = await Menu.find();
  res.json(menu);
});

app.post("/menu", async (req, res) => {
  const { adminId, name, description, price, image, category } = req.body;
  if (!ADMIN_IDS.includes(parseInt(adminId))) {
    return res.status(403).json({ error: "–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ" });
  }
  const lastItem = await Menu.findOne().sort({ id: -1 });
  const newId = lastItem ? lastItem.id + 1 : 1;
  const newItem = new Menu({ id: newId, name, description, price, image: image || `${WEBAPP_URL}/api/placeholder/200/120`, category });
  await newItem.save();
  res.json({ success: true, item: newItem });
});

app.get("/orders", async (req, res) => {
  const { adminId } = req.query;
  if (!ADMIN_IDS.includes(parseInt(adminId))) {
    return res.status(403).json({ error: "–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ" });
  }
  const orders = await Order.find().sort({ dateTime: -1 });
  res.json(orders);
});

app.post("/orders/update-status/:id", async (req, res) => {
  const { adminId, status } = req.body;
  if (!ADMIN_IDS.includes(parseInt(adminId))) {
    return res.status(403).json({ error: "–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ" });
  }
  const order = await Order.findById(req.params.id);
  if (!order) {
    return res.status(404).json({ error: "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
  }
  order.status = status;
  await order.save();
  bot.sendMessage(order.chatId, `–°—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: ${status}`);
  res.json({ success: true });
});

app.get("/admin", (req, res) => {
  const adminId = parseInt(req.query.adminId);
  if (!ADMIN_IDS.includes(adminId)) {
    return res.status(403).json({ error: "–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ" });
  }
  res.sendFile(path.join(__dirname, "public", "admin.html"));
});

bot.onText(/\/admin/, (msg) => {
  const chatId = msg.chat.id;
  if (!ADMIN_IDS.includes(chatId)) {
    return bot.sendMessage(chatId, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ");
  }
  bot.sendMessage(chatId, "üë®‚Äçüíº –ü–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω–∞", {
    reply_markup: {
      inline_keyboard: [[{ 
        text: "üìã –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è", 
        web_app: { url: `${WEBAPP_URL}/admin?adminId=${chatId}` } 
      }]],
    },
  });
});

app.listen(PORT, async () => {
  console.log(`üåê –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ ${WEBAPP_URL}`);
  try {
    await bot.setWebHook(`${WEBAPP_URL}/bot${TELEGRAM_TOKEN}`);
    console.log("‚úÖ Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");
  } catch (err) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Webhook:", err);
  }
});